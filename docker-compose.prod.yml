version: '3.8'

services:
  kanban-postgres:
    image: "postgres:15-alpine"
    container_name: kanban-postgres-prod
    volumes:
      - kanban-data-prod:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Don't expose database port in production
    networks:
      - kanban-network

  kanban-app:
    build: 
      context: ./kanban-app
      dockerfile: Dockerfile
    container_name: kanban-app-prod
    environment:
      DB_SERVER: kanban-postgres
      SPRING_PROFILES_ACTIVE: production
    depends_on:
      kanban-postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - kanban-network

  kanban-ui:
    build: 
      context: ./kanban-ui
      dockerfile: Dockerfile
    container_name: kanban-ui-prod
    ports:
      - "80:80"
    depends_on:
      - kanban-app
    restart: unless-stopped
    networks:
      - kanban-network

  # Reverse proxy for production
  nginx-proxy:
    image: nginx:1.25-alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - kanban-ui
      - kanban-app
    restart: unless-stopped
    networks:
      - kanban-network

volumes:
  kanban-data-prod:

networks:
  kanban-network:
    driver: bridge
